------------------Local Operation-----------------
Check the current path:
	pwd  (print working directory)
pull --rebase vs normal pull

Creating repo:

	1. Go to specific directory:
		cd /e/morning
	2. Make a directory
		mkdir study (e/morning/study)

	3. Create new repo
		git init
	
	Go to parent directory
		cd ..


Remove/Delete a repo/dir permanently
	rm -rf .git
	rm -rf haha


Remove a file:
	1. rm <filename> 
		//delete tracked/untracked files in working tree, can't see it; for tracked files, deletion staged to be commited
	2. git rm <filename>
		//can't delete untracked files, deletion staged for commit

	3. git rm --cached -- <filename>
		//remove file so it is untracked but EXISTED in work tree
		git rm --cached -r -- .
		//remove ALL files so they are untracked but EXISTED in worktree


Add & Commit: 
	1. git add <fileName>  (<git add .> add all into Stage)
	2. git commit -m"<description>"
	Note: When missing 'commit message'. In prompt typing message, ESC, :wq, Enter


Unstage files:
	git reset HEAD [<filename>]


Discard/Restore working tree changes/Update working tree to match version in Index
	git checkout -- <fileName> 
	git checkout -- . (checkout all)


Show details:
	git show [options] <objects>
	objects: blobs, trees, tags and commits
	options: --pretty=oneline, short, medium, full ...
	e.g.
		git show --pretty=oneline 42wq124/HEAD^/HEAD~n
		git show --pretty=oneline <tagname>


Show changes between commits, commit and working tree, etc
	git diff: changes in working tree not yet staged
	git diff --cached: changes btwn Index and last commit
	git diff HEAD: changes btwn working tree and last commit


Reset current HEAD to specified date:
	1. git reset --hard HEAD^ (last version)
	2. git reset --hard HEAD~2 (go backward 2 versions)
	3. git reset --hard 23ad2d (specified version)
	--hard reset Index and Working tree, all changes discard.
	--soft reset neither, reset status to 'Staged to commit', changes preserved
	--mixd(default) reset Index, changes in Working tree preserved


Edit commit message for last commit
	1. git commit --amend
	2. Type new commit message
	3. ESC to exit input 
	4. :wp to finish


Set your own editor: 
	git config --global core.editor "'G:/Sublime/Sublime Text 3/sublime_text.exe' -wait"


>>>>>>>>>>>>>>Branch Management<<<<<<<<<<<<<
________________________________
|	  _____________________________	
|	  | master: cmt6-cmt5-..-comt1 |
|	  |_________head_______________|
|
Repo   		HEAD
|	  _____________________________	
|	  | branch1:cmt10-cmt9-..-comt1 |
|	  |_________head_______________|
|
|
|_______________________________

Master usually is used to release the new version, don't operate on it.
Team members are working on own branch of the main branch, merge changes to main branch, then merge into master finally.

Create branch:
	git branch <branchname>/git checkout -b <branchname> origin/<branchname>:create a local branch that connects with a remote branch

View branches:
	git branch -v: show local branches and last commits info.
	git branch [-a/--all] [-v]: show all branches [with last commits info]

Switch branch:
	git checkout <branchname>

Merge branch:
	git merge <branchname>: merge another branch to current branch
	git merge --no-f -m"" : no fast-forward merge

Delete branch:
	git branch -d <branchname1,branchname2>
	git branch -D <branchname>: delete a unmerged branch

Stash: store current modification in hidden place & restore a clean worktree as the latest commit
	git stash: create a stash
	git stash save [message]: create a stash with description
	git stash list: show all stash list
	git stash show [-p] [stash]: show changes btwn stash and its original status
	git stash pop [stash]: Apply a stash and remove it from stash list
	git stash apply [stash]: Apply a stash but don't remove it from stash list
	git stash drop [stash]: Drop a stash from stash list
	git stash branch <branchname> [stash]: create a new branch where the stored 			stash applied and drop stash from stash list


>>>>>>>>>>>>>>>>>>>Tagging<<<<<<<<<<<<<<<<<<<<<<
Create lightweight tag:
	git tag <tagname>

Create annotated tag:
	git tag -a <tagname> -m"message"

List tags:
	git tag
	git tag -1 "tag format": View particular patterned tags: git tag -1 "v1.3*"

Show tags info:
	git show <tagname>

Tagging later:
	git tag [-a] <tagname> <commit>

Delete local tags:
	git tag -d <tagname>


------------Remote Operation---------------
Connect local and remote repo:
	1. Get in local repo path
	2. git remote add <remoteRepoName> <url> (can b done with multi remote repo)
	3. 'git push -u <remoteRepoName> <local branch>' to finish first push to remote 	repo
	4. 'git remote -v' to view all connected remote repo

Clone repo from remote repo:
	git clone <url> (git clone git@github.com:aaa/bbb.git)

View remote repo info:
	git remote [-v]

Push branches:
	git push <remotebranch> <localbranch>: git push origin dev

Fetch branches:

	git fetch <remoterbranch>: download but not automatically try to merge

Pull branches: 
	git pull
	git branch --set-upstream-to=origin/<branch>: connect local branch with remote 			branch so that you can pull information


Delete branch on remote:
	git push origin --delete <branchname>
	git branch -dr origin/<branchname>


Push tags to remote:
	git push origin <tagname>: push 1 tag
	git push origin --tags: push all unpushed tags

Delete tags on remote:
	git push origin :refs/tags/<tagname>

